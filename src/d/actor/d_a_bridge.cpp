//
// Generated by dtk
// Translation Unit: d_a_bridge.cpp
//

#include "d/actor/d_a_bridge.h"
#include "d/actor/d_a_bk.h"
#include "d/actor/d_a_bomb.h"
#include "d/res/res_bridge.h"
#include "d/res/res_always.h"
#include "d/d_bg_w.h"
#include "d/d_bg_w_sv.h"
#include "d/d_com_inf_game.h"
#include "d/d_path.h"
#include "d/d_procname.h"
#include "f_op/f_op_actor_mng.h"
#include "m_Do/m_Do_audio.h"

/* 00000078-00000504       .text ride_call_back__FP4dBgWP10fopAc_ac_cP10fopAc_ac_c */
void ride_call_back(dBgW* bgw, fopAc_ac_c* i_ac, fopAc_ac_c* i_pt) {
    bridge_class* i_this = static_cast<bridge_class*>(i_ac);
    
    cXyz local_4c = i_this->mBr[0].mPosition - i_pt->current.pos;
    int br_idx = (std::sqrtf(local_4c.x * local_4c.x + local_4c.z * local_4c.z) / 76.5f - (-0.5f));
    int last_br_idx = i_this->mBrCount - 1; 
    if(br_idx > last_br_idx)
        br_idx = last_br_idx;
    else if(br_idx < 0)
            br_idx = 0;

    br_s* br_i = &i_this->mBr[br_idx];
    float fVar = ((i_this->mTypeBits & 0b101) != 0) ? 0.85f : 1.0f;

    mDoMtx_YrotS(*calc_mtx, -br_i->mRotation.y);
    cXyz delta_pos2 = i_pt->current.pos - br_i->mPosition;
    cXyz local_64, cStack_70;
    MtxPosition(&delta_pos2, &local_64);
    delta_pos2 = i_pt->old.pos - br_i->mPosition;
    MtxPosition(&delta_pos2, &cStack_70);
    i_pt->speed.y = -5.0f;

    float fVar6;
    s16 pt_name = fopAcM_GetName(i_pt);
    if(pt_name == PROC_PLAYER){
        fVar6 = 100.0f;
        br_i->m3F4 = -31.0f;
        i_this->m033C = 5;
    }
    else if(pt_name == PROC_MO2){
        fVar6 = 150.0f;
        br_i->m3F4 = -40.0f;
        i_pt->speed.y = -20.0f;
    }
    else if(pt_name == PROC_BK){
        i_pt->speed.y = -20.0f;
        fVar6 = 100.0f;
        br_i->m3F4 = -25.0f;
        bk_class* i_other = static_cast<bk_class*>(i_pt);
        i_other->dr.m7B8 = fopAcM_GetID(i_ac);
        i_other->dr.m7B2 = 8;
        i_other->dr.m7AC = br_i->mRotation;
        if(local_64.x > 0.0f){
            i_other->dr.m79C = &br_i->m11C[1];
            i_other->dr.m7AC.y += -0x4000;
            i_other->dr.m7B4 = -0x2000;
        }
        else {
            i_other->dr.m79C = &br_i->m0F8[1];
            i_other->dr.m7AC.y += 0x4000;
            i_other->dr.m7B4 = 0x2000;
        }
        i_other->m0B2C = br_i;
    }
    else {
        fVar6 = 50.0f;
        br_i->m3F4 = -10.0f;
        if(fopAcM_GetName(i_pt) == PROC_BOMB && static_cast<daBomb_c*>(i_pt)->getBombRestTime() <= 1){
            br_i->m3F4 = -300.0f;
            i_this->m02E0 = 20.0f;
            return;
        }
    }

    fVar6 *= fVar;
    br_i->m3F4 *= fVar;
    br_i->m3F4 += i_this->m02FC * JMASSin(i_this->m0300) * 0.03f * fVar6;
    br_i->m400 = -local_64.x * fVar6;
    br_i->m406 = 2;
    local_4c = local_64 - cStack_70;
    fVar6 = 0.3f * local_4c.abs() * fVar;
    if(fVar6 > 20.0f)
        fVar6 = 20.0f;

    if(i_this->m02E0 <= fVar6){
        i_this->m02E0 = fVar6;
    }

    fVar6 = fVar * std::abs(local_4c.x);
    if(fVar6 > 50.0f)
        fVar6 = 50.0f;

    if(i_this->m02E4 <= fVar6)
        i_this->m02E4 += 0.5f;

    return;
}

/* 00000540-00000614       .text kikuzu_set__FP12bridge_classP4cXyz */
void kikuzu_set(bridge_class* i_this, cXyz* pos) {
    /* Nonmatching */
    csXyz angle = dComIfGp_getPlayer(0)->shape_angle;
    angle.y -= 0x8000;

    JPABaseEmitter* particle_emitter = dComIfGp_particle_set(dPa_name::ID_COMMON_002B, pos, &angle, NULL, 0xff, NULL, -1, &i_this->tevStr.mColorK0, &i_this->tevStr.mColorK0, NULL);
    if(particle_emitter != NULL){
        particle_emitter->setRate(10.0f);
        particle_emitter->setMaxFrame(1);
        particle_emitter->setSpread(0.2f);
        particle_emitter->setVolumeSweep(0.15f);
        JGeometry::TVec3<float> scale(0.7f, 0.7f, 0.7f);
        particle_emitter->setGlobalParticleScale(scale);
    }
}

/* 00000614-000011EC       .text daBridge_Draw__FP12bridge_class */
static BOOL daBridge_Draw(bridge_class* i_this) {
    // Non matching : Regalloc
    fopAc_ac_c* a_this = i_this;

    if(i_this->mbStopDraw){
        return TRUE;
    }

    br_s* br_i = i_this->mBr;
    for(int i = 0; i < i_this->mBrCount; i++, br_i++){
        g_env_light.setLightTevColorType(br_i->mpModel, &a_this->tevStr);
        dComIfGd_setListBG();
        mDoExt_modelUpdateDL(br_i->mpModel);
        dComIfGd_setList();
        
        if(br_i->m408 & 4){
            mDoMtx_YrotS(*calc_mtx, i_this->m0300);
            cXyz local_bc(0.0f, 0.0f, 1.0f), local_c8;
            MtxPosition(&local_bc, &local_c8);
            cXyz uXyz = br_i->m11C[0] - br_i->m11C[1], local_e0 = br_i->m0F8[0] - br_i->m0F8[1];

            if(not (i_this->mTypeBits & 1)){
                u8 line_sz;
                if(i_this->mTypeBits & 8){
                    line_sz = 5;
                }
                else {
                    line_sz = 3;
                }

                u8* i_line_0_sz = br_i->mLineMat1.mpLines[0].mpSize, *i_line_2_sz = br_i->mLineMat1.mpLines[2].mpSize;
                if(not (br_i->m408 & 1)){
                    for(int j = 5; j != 0; i_line_0_sz++, i_line_2_sz++, j--){
                        *i_line_2_sz = line_sz;
                        *i_line_0_sz = line_sz;
                    }
                }
                else {
                    cXyz *i_line_0_seg = br_i->mLineMat1.mpLines[0].mpSegments, *i_line_2_seg = br_i->mLineMat1.mpLines[2].mpSegments;
                    uXyz.x *= 0.25f;
                    uXyz.y *= 0.25f;
                    uXyz.z *= 0.25f;
                    float fVar3 = br_i->m3A0[0] * JMASSin(i_this->m0300 * 5);
                    for(int j = 0; j < 5; j++, i_line_0_seg++, i_line_2_seg++, i_line_0_sz++, i_line_2_sz++){
                        *i_line_0_sz = line_sz;
                        float fVar2;
                        if(j == 2){
                            fVar2 = 1.0f;
                            if(br_i->m3A4 <= 1){
                                *i_line_0_sz = 0;
                            }
                            else if(br_i->m3A4 == 2){
                                *i_line_0_sz = 1;
                            }
                            br_i->m3A8[0].set(*i_line_0_seg);
                        }
                        else if(j == 1 || j == 3){
                            fVar2 = 0.7f;
                        }
                        else {
                            fVar2 = 0.0f;
                        }

                        local_bc.x = uXyz.z * j + fVar3 * local_c8.x * fVar2;
                        local_bc.y = uXyz.y * j;
                        local_bc.z = uXyz.x * j + fVar3 * local_c8.z * fVar2;
                        *i_line_0_seg = br_i->m11C[1] + local_bc;
                        i_line_2_seg->set(br_i->m11C[0]);
                        *i_line_2_sz = 0;
                    }
                }

                u8 *i_line_1_sz = br_i->mLineMat1.mpLines[1].mpSize, *i_line_3_sz = br_i->mLineMat1.mpLines[3].mpSize;
                if(not (br_i->m408 & 2)){
                    for(int j = 5; j != 0; j--, i_line_1_sz++, i_line_3_sz++){
                        *i_line_3_sz = line_sz;
                        *i_line_1_sz = line_sz;
                    }
                }
                else {
                    cXyz *i_line_1_seg = br_i->mLineMat1.mpLines[1].mpSegments, *i_line_3_seg = br_i->mLineMat1.mpLines[3].mpSegments;
                    local_e0.x *= 0.25f;
                    local_e0.y *= 0.25f;
                    local_e0.z *= 0.25f;
                    float fVar3 = br_i->m3A0[1] * JMASSin(i_this->m0300 * 5);
                    for(int j = 0; j < 5; j++, i_line_1_seg++, i_line_3_seg++, i_line_1_sz++, i_line_3_sz++){
                        *i_line_1_sz = line_sz;
                        float fVar2;
                        if(j == 2){
                            fVar2 = 1.0f;
                            if(br_i->m3A5 <= 1){
                                *i_line_1_sz = 0;
                            }
                            else if(br_i->m3A5 == 2){
                                *i_line_1_sz = 1;
                            }
                            br_i->m3A8[1] = *i_line_1_seg;
                        }
                        else if(j == 1 || j == 3){
                            fVar2 = 0.7f;
                        }
                        else {
                            fVar2 = 0.0f;
                        }

                        local_bc.x = local_e0.x * j + fVar3 * local_c8.x * fVar2;
                        local_bc.y = local_e0.y * j;
                        local_bc.z = local_e0.z * j + fVar3 * local_c8.z * fVar2;
                        i_line_1_seg->set(br_i->m0F8[1] + local_bc);
                        i_line_3_seg->set(br_i->m0F8[0]);
                        *i_line_3_sz = 0;
                    }
                }
                GXColor local_12c = {150, 150, 150, 0xff};
                br_i->mLineMat1.update(5, local_12c, &a_this->tevStr);
                dComIfGd_set3DlineMat(&br_i->mLineMat1);
            }
            else {
                if(br_i->m408 & 1) {
                    s16 uXyz_yz_angle = -cM_atan2s(uXyz.y, uXyz.z);
                    int iVar4 = cM_atan2s(uXyz.x, std::sqrtf(uXyz.y * uXyz.y + uXyz.z * uXyz.z));
                    MtxTrans(br_i->m11C[1].x, br_i->m11C[1].y, br_i->m11C[1].z, false);
                    short sVar8 = br_i->m3A0[0], sVar7;
                    if(sVar8 != 0){
                        sVar8 = sVar8 * JMASSin(i_this->m0300 * 6) * 100.0f;
                        sVar7 = i_this->m0300;
                    }
                    else {
                        sVar7 = 0;
                        sVar8 = 0;
                    }
                    mDoMtx_YrotM(*calc_mtx, sVar7);
                    mDoMtx_XrotM(*calc_mtx, sVar8 + uXyz_yz_angle);
                    mDoMtx_YrotM(*calc_mtx, iVar4);
                    br_i->mpModelRope0->setBaseTRMtx(*calc_mtx);
                    g_env_light.setLightTevColorType(br_i->mpModelRope0, &a_this->tevStr);
                    mDoExt_modelUpdateDL(br_i->mpModelRope0);
                }
                if((br_i->m408 & 2) != 0){
                    s16 local_e0_yz_angle = -cM_atan2s(local_e0.y, local_e0.z);
                    int iVar4 = cM_atan2s(local_e0.x, std::sqrtf(local_e0.y * local_e0.y + local_e0.z * local_e0.z));
                    MtxTrans(br_i->m0F8[1].x, br_i->m0F8[1].y, br_i->m0F8[1].z, false);
                    short sVar8 = br_i->m3A0[1], sVar7;
                    if(sVar8 != 0){
                        sVar8 = sVar8 * JMASSin(i_this->m0300 * 6) * 100.0f;
                        sVar7 = i_this->m0300;
                    }
                    else {
                        sVar7 = 0;
                        sVar8 = 0;
                    }
                    
                    mDoMtx_YrotM(*calc_mtx, sVar7);
                    mDoMtx_XrotM(*calc_mtx, sVar8 + local_e0_yz_angle);
                    mDoMtx_YrotM(*calc_mtx, iVar4);
                    br_i->mpModelRope1->setBaseTRMtx(*calc_mtx);
                    g_env_light.setLightTevColorType(br_i->mpModelRope1, &a_this->tevStr);
                    mDoExt_modelUpdateDL(br_i->mpModelRope1);
                }
            }
        }
    }

    if((i_this->mTypeBits & 5) == 0){
        cXyz local_ec(-120.0f, 350.0f, -40.0f), local_f8, *pcVar5;
        mDoMtx_YrotS(*calc_mtx, a_this->home.angle.y);
        MtxPosition(&local_ec, &local_f8);
        pcVar5 = i_this->mLineMat.mpLines->mpSegments;
        pcVar5->x = a_this->home.pos.x + local_f8.x;
        pcVar5->y = a_this->home.pos.y + local_f8.y;
        pcVar5->z = a_this->home.pos.z + local_f8.z;
        local_ec.z *= -1.0f;

        pcVar5 = i_this->mLineMat.mpLines->mpSegments + i_this->m030C + 1;
        if((i_this->mTypeBits & 2) != 0){
            bridge_class* aite = i_this->mpAite;
            if(aite != NULL){
                pcVar5->set(aite->m032C);
            }
        }
        else {
            MtxPosition(&local_ec, &local_f8);
            pcVar5->x = i_this->mEndPos.x + local_f8.x;
            pcVar5->y = i_this->mEndPos.y + local_f8.y;
            pcVar5->z = i_this->mEndPos.z + local_f8.z;
        }
        local_ec.x *= -1.0f;
        local_ec.z *= -1.0f;
        MtxPosition(&local_ec, &local_f8);
        pcVar5 = i_this->mLineMat.mpLines[1].mpSegments;
        pcVar5->x = a_this->home.pos.x + local_f8.x;
        pcVar5->y = a_this->home.pos.y + local_f8.y;
        pcVar5->z = a_this->home.pos.z + local_f8.z;
        local_ec.z *= -1.0f;
        pcVar5 = i_this->mLineMat.mpLines[1].mpSegments + i_this->m030C + 1;
        if((i_this->mTypeBits & 2) != 0){
            bridge_class* aite = i_this->mpAite;
            if(aite != NULL){
                pcVar5->set(aite->m0320);
            }
        }
        else {
            MtxPosition(&local_ec, &local_f8);
            pcVar5->x = i_this->mEndPos.x + local_f8.x;
            pcVar5->y = i_this->mEndPos.y + local_f8.y;
            pcVar5->z = i_this->mEndPos.z + local_f8.z;
        }

        float fVar;
        if((i_this->mTypeBits & 8) != 0){
            fVar = 6.5f;
        }
        else {
            fVar = 4.0f;
        }
        GXColor local_130 = {150, 150, 150, 0xff};
        i_this->mLineMat.update(i_this->m030C + 2, fVar, local_130, 0, &a_this->tevStr);
        dComIfGd_set3DlineMat(&i_this->mLineMat);
    }

    return TRUE;
}

/* 000011EC-00001580       .text control1__FP12bridge_classP4br_s */
void control1(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 00001580-0000178C       .text control2__FP12bridge_classP4br_s */
void control2(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 0000178C-000018A8       .text control3__FP12bridge_classP4br_s */
void control3(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 000018A8-00001B08       .text cut_control1__FP12bridge_classP4br_s */
void cut_control1(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 00001B08-00001D84       .text cut_control2__FP12bridge_classP4br_s */
void cut_control2(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 00001D84-00001FAC       .text himo_cut_control1__FP4cXyz */
void himo_cut_control1(cXyz*) {
    /* Nonmatching */
}

/* 00001FAC-00002A1C       .text bridge_move__FP12bridge_class */
void bridge_move(bridge_class*) {
    /* Nonmatching */
}

/* 00002A1C-00002A8C       .text s_a_b_sub__FPvPv */
void s_a_b_sub(void*, void*) {
    /* Nonmatching */
}

/* 00002A8C-00002AB8       .text search_aite__FP12bridge_class */
void search_aite(bridge_class*) {
    /* Nonmatching */
}

/* 00002AB8-00003C68       .text daBridge_Execute__FP12bridge_class */
static BOOL daBridge_Execute(bridge_class*) {
    /* Nonmatching */
}

/* 00003C68-00003CD4       .text daBridge_IsDelete__FP12bridge_class */
static BOOL daBridge_IsDelete(bridge_class* i_this) {
    br_s* brArr = i_this->mBr;
    for(int i = 0; i < i_this->mBrCount; i++, brArr++){
        mDoAud_seDeleteObject(&brArr->mAudioPos);
    }

    return TRUE;
}

/* 00003CD4-00003D2C       .text daBridge_Delete__FP12bridge_class */
static BOOL daBridge_Delete(bridge_class* i_this) {
    dComIfG_resDelete(&i_this->mPhsBridge, "Bridge");
    if(i_this->mpBgW != NULL){
        dComIfG_Bgsp()->Release(i_this->mpBgW);
    }

    return TRUE;
}

/* 00003D2C-00003E00       .text CreateInit__FP10fopAc_ac_c */
void CreateInit(fopAc_ac_c* a_this) {
    static dCcD_SrcCyl himo_cyl_src = {
    // dCcD_SrcGObjInf
    {
        /* Flags             */ 0,
        /* SrcObjAt  Type    */ 0,
        /* SrcObjAt  Atp     */ 0,
        /* SrcObjAt  SPrm    */ 0,
        /* SrcObjTg  Type    */ ~(AT_TYPE_BOOMERANG | AT_TYPE_WATER | AT_TYPE_UNK20000 | AT_TYPE_WIND | AT_TYPE_UNK400000 | AT_TYPE_LIGHT),
        /* SrcObjTg  SPrm    */ cCcD_TgSPrm_Set_e | cCcD_TgSPrm_IsEnemy_e,
        /* SrcObjCo  SPrm    */ cCcD_CoSPrm_Set_e | cCcD_CoSPrm_IsPlayer_e | cCcD_CoSPrm_VsGrpAll_e,
        /* SrcGObjAt Se      */ 0,
        /* SrcGObjAt HitMark */ 0,
        /* SrcGObjAt Spl     */ 0,
        /* SrcGObjAt Mtrl    */ 0,
        /* SrcGObjAt SPrm    */ 0,
        /* SrcGObjTg Se      */ 0,
        /* SrcGObjTg HitMark */ ~0,
        /* SrcGObjTg Spl     */ 0,
        /* SrcGObjTg Mtrl    */ 0,
        /* SrcGObjTg SPrm    */ dCcG_TgSPrm_Shield_e,
        /* SrcGObjCo SPrm    */ 0,
    },
    // cM3dGCylS
    {
        /* Center */ 0.0f, 0.0f, 0.0f,
        /* Radius */ 5.0f,
        /* Height */ 1000.0f,
    },
};

    bridge_class* i_this = static_cast<bridge_class*>(a_this);

    i_this->mStts.Init(0xff, 0xff, a_this);

    br_s* br_i = i_this->mBr;
    for(int i = 0; i < i_this->mBrCount; i++, br_i++){
        for(int j = 0; j < 2; j++){
            br_i->mCyl[j].Set(himo_cyl_src);
            br_i->mCyl[j].SetStts(&i_this->mStts);
            if((i_this->mTypeBits & 1) == 0){
                br_i->mCyl[j].SetH(200.0f);
                br_i->mCyl[j].OffTgShield();
            }
        }
    }
}

/* 00003E00-00004310       .text CallbackCreateHeap__FP10fopAc_ac_c */
static BOOL CallbackCreateHeap(fopAc_ac_c* a_this) {
    static const int bridge_bmd[2] = {BRIDGE_BDL_OBM_BRIDGE, BRIDGE_BDL_OBM_BRIDGE2};

    bridge_class* i_this = static_cast<bridge_class*>(a_this);
    
    uint modelNum = i_this->mTypeBits & 1;
    if((i_this->mTypeBits & 4) != 0)
        modelNum = 1;

    J3DModelData* modelData, *modelData2;
    modelData = static_cast<J3DModelData*>(dComIfG_getObjectRes("Bridge", bridge_bmd[modelNum]));
    JUT_ASSERT(0x920, modelData != NULL);
    
    if(modelNum == 1){
        modelData2 = static_cast<J3DModelData*>(dComIfG_getObjectRes("Bridge", BRIDGE_BDL_OBM_CHAIN1));
        JUT_ASSERT(0x926, modelData2 != NULL);
    }

    br_s* pBr = i_this->mBr;
    int iVar8 = 2;
    if((i_this->mTypeBits & 1) != 0)
        iVar8 = 0;

    for(int i = 0; i < i_this->mBrCount ;i++, pBr++){
        pBr->mpModel = mDoExt_J3DModel__create(modelData, 0x80000, 0x11020002);
        if(pBr->mpModel == NULL)
            return 0;

        if((i_this->mTypeBits & 4) == 0){
            if((i + iVar8 & 0b11) == 0){
                pBr->m408 = 7;
                if((i_this->mTypeBits & 1) == 1){
                    pBr->m418 = 50;
                    pBr->mpModelRope0 = mDoExt_J3DModel__create(modelData2, 0x80000, 0x11020002);
                    pBr->mpModelRope1 = mDoExt_J3DModel__create(modelData2, 0x80000, 0x11020002);
                    if(pBr->mpModelRope0 == NULL || pBr->mpModelRope1 == NULL)
                        return FALSE;
                }
                else {
                    pBr->m418 = -1;
                    BOOL lineMatSucc;
                    if((i_this->mTypeBits & 8) != 0){
                        ResTIMG* lineMatData = static_cast<ResTIMG*>(dComIfG_getObjectRes("Always", ALWAYS_BTI_TXM_ROPE1));
                        lineMatSucc = pBr->mLineMat1.init(4, 5, lineMatData, 1);
                    }
                    else {
                        ResTIMG* lineMatData = static_cast<ResTIMG*>(dComIfG_getObjectRes("Always", ALWAYS_BTI_ROPE));
                        lineMatSucc = pBr->mLineMat1.init(4, 5, lineMatData, 1);
                    }
                    if(lineMatSucc == FALSE)
                        return FALSE;
                }
            }
            if(i == 0){
                BOOL lineMatSucc;
                if((i_this->mTypeBits & 8) != 0){
                    ResTIMG* lineMatData = static_cast<ResTIMG*>(dComIfG_getObjectRes("Always", ALWAYS_BTI_TXM_ROPE1));
                    lineMatSucc = i_this->mLineMat.init(2, 14, lineMatData, 0);
                }
                else {
                    ResTIMG* lineMatData = static_cast<ResTIMG*>(dComIfG_getObjectRes("Always", ALWAYS_BTI_ROPE));
                    lineMatSucc = i_this->mLineMat.init(2, 14, lineMatData, 0);
                }
                
                if(lineMatSucc == FALSE)
                    return FALSE;
            }
        }

        if((i_this->mTypeBits & 1) == 0){
            pBr->mScale.y = cM_rndF(0.3f) + 1.0f;
            if((i + iVar8 & 0b11) == 0){
                pBr->mScale.x = 1.05f;
            }
            else{
                pBr->mScale.x = cM_rndF(0.1f) + 1.0f;
            }
        }
        else
            pBr->mScale.x = pBr->mScale.x = 1.0f;

        pBr->mScale.z = 1.5f;
        pBr->mpModel->setBaseScale(pBr->mScale);
        if(cM_rndF(1.0f) < 0.5f)
            pBr->mRotationYExtra = -0x8000;
    }

    i_this->mpBgW = new dBgWSv();
    if(i_this->mpBgW == NULL)
        return FALSE;

    if((i_this->mTypeBits & 1) == 1){
        cBgD_t* bgwData = static_cast<cBgD_t*>(dComIfG_getObjectRes("Bridge", BRIDGE_DZB_MBRDG2));
        if(i_this->mpBgW->Set(bgwData, 0) != FALSE)
            return FALSE;
    }
    else {
        cBgD_t* bgwData = static_cast<cBgD_t*>(dComIfG_getObjectRes("Bridge", BRIDGE_DZB_MBRDG));
        if(i_this->mpBgW->Set(bgwData, 0) != FALSE)
            return FALSE;
    }
    i_this->mpBgW->SetRideCallback(ride_call_back);
    i_this->mpBgW->CopyBackVtx();
    
    cBgD_Vtx_t* pVtxTbl = i_this->mpBgW->GetVtxTbl();
    for(int i = 0; i < i_this->mpBgW->GetVtxNum(); i++){
        pVtxTbl[i].x = a_this->current.pos.x;
        pVtxTbl[i].y = a_this->current.pos.y;
        pVtxTbl[i].z = a_this->current.pos.z;
    }
    i_this->mpBgW->Move();
    return TRUE;
}

/* 00004310-00004770       .text daBridge_Create__FP10fopAc_ac_c */
static cPhs_State daBridge_Create(fopAc_ac_c* a_this) {
    bridge_class* i_this = static_cast<bridge_class*>(a_this);
    fopAcM_SetupActor(i_this, bridge_class);

    cPhs_State ret = dComIfG_resLoad(&i_this->mPhsBridge, "Bridge");
    if(ret == cPhs_COMPLEATE_e){
    
        i_this->mTypeBits = fopAcM_GetParam(a_this);
        if(i_this->mTypeBits == 0xff)
            i_this->mTypeBits = 0;
        i_this->mUnk_2 = fopAcM_GetParam(a_this) >> 8;
        i_this->mPathId = fopAcM_GetParam(a_this) >> 16;
        if(i_this->mPathId == 0xff)
            return cPhs_ERROR_e;

        dPath* path = dPath_GetRoomPath(i_this->mPathId, fopAcM_GetRoomNo(a_this));
        if(path != NULL){
            dPnt* pnt = path->m_points;
            a_this->home.pos = pnt[0].m_position;
            i_this->mEndPos = pnt[1].m_position;
            cXyz delta = i_this->mEndPos - a_this->home.pos;

            a_this->home.angle.y = cM_atan2s(delta.x, delta.z);
            a_this->home.angle.x = -cM_atan2s(delta.y, std::sqrtf(delta.x * delta.x + delta.z * delta.z));
            
            float fVar1 = 0.0f;
            if(delta.abs() > 1300.0f) fVar1 = 3.0f;
            i_this->mBrCount = delta.abs() / ((fVar1 + 47.0f) * 1.5f);
            i_this->mPathIdP = i_this->mPathId + 1;
        }
        else {
            return cPhs_ERROR_e;
        }
        if(i_this->mBrCount >= 50)
            return cPhs_ERROR_e;

        if(fopAcM_entrySolidHeap(a_this, CallbackCreateHeap, 0x2fb60) == false)
            return cPhs_ERROR_e;

        CreateInit(a_this);
        if(i_this->mpBgW != NULL && dComIfG_Bgsp()->Regist(i_this->mpBgW, i_this) != 0)
            return cPhs_ERROR_e;

        a_this->cullMtx = i_this->mBr[0].mpModel->getBaseTRMtx();
        fopAcM_setCullSizeBox(a_this, -120.0f, -30.0f, -60.0f, 120.0f, 30.0f, 60.0f);
        fopAcM_setCullSizeFar(a_this, 10.0f);
        if((i_this->mTypeBits & 0b10) != 0){
            // if(i_this->mBrCount < 16){
            //     if(i_this->mBrCount < 12){
            //         i_this->m02DD = 7;
            //     }
            //     else {
            //         i_this->m02DD = 11;
            //     }
            // }
            // else {
            //     i_this->m02DD = 15;
            // }
            if(i_this->mBrCount >= 16)
                i_this->m02DD = 15;
            else if(i_this->mBrCount >= 12)
                i_this->m02DD = 11;
            else
                i_this->m02DD = 7;
        }
        else{
            i_this->m02DD = i_this->mBrCount;
        }
        
    }

    return ret;
}

static actor_method_class l_daBridge_Method = {
    (process_method_func)daBridge_Create,
    (process_method_func)daBridge_Delete,
    (process_method_func)daBridge_Execute,
    (process_method_func)daBridge_IsDelete,
    (process_method_func)daBridge_Draw,
};

actor_process_profile_definition g_profile_BRIDGE = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0003,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_BRIDGE,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(bridge_class),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x0089,
    /* Actor SubMtd */ &l_daBridge_Method,
    /* Status       */ fopAcStts_CULL_e | fopAcStts_UNK4000_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
