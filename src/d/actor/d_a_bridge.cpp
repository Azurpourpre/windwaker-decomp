//
// Generated by dtk
// Translation Unit: d_a_bridge.cpp
//

#include "d/actor/d_a_bridge.h"
#include "d/res/res_bridge.h"
#include "d/res/res_always.h"
#include "d/d_bg_w.h"
#include "d/d_bg_w_sv.h"
#include "d/d_com_inf_game.h"
#include "d/d_path.h"
#include "d/d_procname.h"
#include "f_op/f_op_actor_mng.h"
#include "m_Do/m_Do_audio.h"

/* 00000078-00000504       .text ride_call_back__FP4dBgWP10fopAc_ac_cP10fopAc_ac_c */
void ride_call_back(dBgW*, fopAc_ac_c*, fopAc_ac_c*) {
    /* Nonmatching */
}

/* 00000540-00000614       .text kikuzu_set__FP12bridge_classP4cXyz */
void kikuzu_set(bridge_class*, cXyz*) {
    /* Nonmatching */
}

/* 00000614-000011EC       .text daBridge_Draw__FP12bridge_class */
static BOOL daBridge_Draw(bridge_class*) {
    /* Nonmatching */
}

/* 000011EC-00001580       .text control1__FP12bridge_classP4br_s */
void control1(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 00001580-0000178C       .text control2__FP12bridge_classP4br_s */
void control2(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 0000178C-000018A8       .text control3__FP12bridge_classP4br_s */
void control3(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 000018A8-00001B08       .text cut_control1__FP12bridge_classP4br_s */
void cut_control1(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 00001B08-00001D84       .text cut_control2__FP12bridge_classP4br_s */
void cut_control2(bridge_class*, br_s*) {
    /* Nonmatching */
}

/* 00001D84-00001FAC       .text himo_cut_control1__FP4cXyz */
void himo_cut_control1(cXyz*) {
    /* Nonmatching */
}

/* 00001FAC-00002A1C       .text bridge_move__FP12bridge_class */
void bridge_move(bridge_class*) {
    /* Nonmatching */
}

/* 00002A1C-00002A8C       .text s_a_b_sub__FPvPv */
void s_a_b_sub(void*, void*) {
    /* Nonmatching */
}

/* 00002A8C-00002AB8       .text search_aite__FP12bridge_class */
void search_aite(bridge_class*) {
    /* Nonmatching */
}

/* 00002AB8-00003C68       .text daBridge_Execute__FP12bridge_class */
static BOOL daBridge_Execute(bridge_class*) {
    /* Nonmatching */
}

/* 00003C68-00003CD4       .text daBridge_IsDelete__FP12bridge_class */
static BOOL daBridge_IsDelete(bridge_class* i_this) {
    br_s* brArr = i_this->mBr;
    for(int i = 0; i < i_this->mBrCount; i++, brArr++){
        mDoAud_seDeleteObject(&brArr->mAudioPos);
    }

    return TRUE;
}

/* 00003CD4-00003D2C       .text daBridge_Delete__FP12bridge_class */
static BOOL daBridge_Delete(bridge_class* i_this) {
    dComIfG_resDelete(&i_this->mPhsBridge, "Bridge");
    if(i_this->mpBgW != NULL){
        dComIfG_Bgsp()->Release(i_this->mpBgW);
    }

    return TRUE;
}

/* 00003D2C-00003E00       .text CreateInit__FP10fopAc_ac_c */
void CreateInit(fopAc_ac_c* a_this) {
    static dCcD_SrcCyl himo_cyl_src = {
    // dCcD_SrcGObjInf
    {
        /* Flags             */ 0,
        /* SrcObjAt  Type    */ 0,
        /* SrcObjAt  Atp     */ 0,
        /* SrcObjAt  SPrm    */ 0,
        /* SrcObjTg  Type    */ ~(AT_TYPE_BOOMERANG | AT_TYPE_WATER | AT_TYPE_UNK20000 | AT_TYPE_WIND | AT_TYPE_UNK400000 | AT_TYPE_LIGHT),
        /* SrcObjTg  SPrm    */ cCcD_TgSPrm_Set_e | cCcD_TgSPrm_IsEnemy_e,
        /* SrcObjCo  SPrm    */ cCcD_CoSPrm_Set_e | cCcD_CoSPrm_IsPlayer_e | cCcD_CoSPrm_VsGrpAll_e,
        /* SrcGObjAt Se      */ 0,
        /* SrcGObjAt HitMark */ 0,
        /* SrcGObjAt Spl     */ 0,
        /* SrcGObjAt Mtrl    */ 0,
        /* SrcGObjAt SPrm    */ 0,
        /* SrcGObjTg Se      */ 0,
        /* SrcGObjTg HitMark */ ~0,
        /* SrcGObjTg Spl     */ 0,
        /* SrcGObjTg Mtrl    */ 0,
        /* SrcGObjTg SPrm    */ dCcG_TgSPrm_Shield_e,
        /* SrcGObjCo SPrm    */ 0,
    },
    // cM3dGCylS
    {
        /* Center */ 0.0f, 0.0f, 0.0f,
        /* Radius */ 5.0f,
        /* Height */ 1000.0f,
    },
};

    bridge_class* i_this = static_cast<bridge_class*>(a_this);

    i_this->mStts.Init(0xff, 0xff, a_this);

    br_s* br_i = i_this->mBr;
    for(int i = 0; i < i_this->mBrCount; i++, br_i++){
        for(int j = 0; j < 2; j++){
            br_i->mCyl[j].Set(himo_cyl_src);
            br_i->mCyl[j].SetStts(&i_this->mStts);
            if((i_this->mTypeBits & 1) == 0){
                br_i->mCyl[j].SetH(200.0f);
                br_i->mCyl[j].OffTgShield();
            }
        }
    }
}

/* 00003E00-00004310       .text CallbackCreateHeap__FP10fopAc_ac_c */
static BOOL CallbackCreateHeap(fopAc_ac_c* a_this) {
    static const int bridge_bmd[2] = {BRIDGE_BDL_OBM_BRIDGE, BRIDGE_BDL_OBM_BRIDGE2};

    bridge_class* i_this = static_cast<bridge_class*>(a_this);
    
    uint modelNum = i_this->mTypeBits & 1;
    if((i_this->mTypeBits & 4) != 0)
        modelNum = 1;

    J3DModelData* modelData, *modelData2;
    modelData = static_cast<J3DModelData*>(dComIfG_getObjectRes("Bridge", bridge_bmd[modelNum]));
    JUT_ASSERT(0x920, modelData != NULL);
    
    if(modelNum == 1){
        modelData2 = static_cast<J3DModelData*>(dComIfG_getObjectRes("Bridge", BRIDGE_BDL_OBM_CHAIN1));
        JUT_ASSERT(0x926, modelData2 != NULL);
    }

    br_s* pBr = i_this->mBr;
    int iVar8 = 2;
    if((i_this->mTypeBits & 1) != 0)
        iVar8 = 0;

    for(int i = 0; i < i_this->mBrCount ;i++, pBr++){
        pBr->mpModel = mDoExt_J3DModel__create(modelData, 0x80000, 0x11020002);
        if(pBr->mpModel == NULL)
            return 0;

        if((i_this->mTypeBits & 4) == 0){
            if((i + iVar8 & 0b11) == 0){
                pBr->m408 = 7;
                if((i_this->mTypeBits & 1) == 1){
                    pBr->m418 = 50;
                    pBr->mpModelRope0 = mDoExt_J3DModel__create(modelData2, 0x80000, 0x11020002);
                    pBr->mpModelRope1 = mDoExt_J3DModel__create(modelData2, 0x80000, 0x11020002);
                    if(pBr->mpModelRope0 == NULL || pBr->mpModelRope1 == NULL)
                        return FALSE;
                }
                else {
                    pBr->m418 = -1;
                    BOOL lineMatSucc;
                    if((i_this->mTypeBits & 8) != 0){
                        ResTIMG* lineMatData = static_cast<ResTIMG*>(dComIfG_getObjectRes("Always", ALWAYS_BTI_TXM_ROPE1));
                        lineMatSucc = pBr->mLineMat1.init(4, 5, lineMatData, 1);
                    }
                    else {
                        ResTIMG* lineMatData = static_cast<ResTIMG*>(dComIfG_getObjectRes("Always", ALWAYS_BTI_ROPE));
                        lineMatSucc = pBr->mLineMat1.init(4, 5, lineMatData, 1);
                    }
                    if(lineMatSucc == FALSE)
                        return FALSE;
                }
            }
            if(i == 0){
                BOOL lineMatSucc;
                if((i_this->mTypeBits & 8) != 0){
                    ResTIMG* lineMatData = static_cast<ResTIMG*>(dComIfG_getObjectRes("Always", ALWAYS_BTI_TXM_ROPE1));
                    lineMatSucc = i_this->mLineMat.init(2, 14, lineMatData, 0);
                }
                else {
                    ResTIMG* lineMatData = static_cast<ResTIMG*>(dComIfG_getObjectRes("Always", ALWAYS_BTI_ROPE));
                    lineMatSucc = i_this->mLineMat.init(2, 14, lineMatData, 0);
                }
                
                if(lineMatSucc == FALSE)
                    return FALSE;
            }
        }

        if((i_this->mTypeBits & 1) == 0){
            pBr->mScale.y = cM_rndF(0.3f) + 1.0f;
            if((i + iVar8 & 0b11) == 0){
                pBr->mScale.x = 1.05f;
            }
            else{
                pBr->mScale.x = cM_rndF(0.1f) + 1.0f;
            }
        }
        else
            pBr->mScale.x = pBr->mScale.x = 1.0f;

        pBr->mScale.z = 1.5f;
        pBr->mpModel->setBaseScale(pBr->mScale);
        if(cM_rndF(1.0f) < 0.5f)
            pBr->mRotationYExtra = -0x8000;
    }

    i_this->mpBgW = new dBgWSv();
    if(i_this->mpBgW == NULL)
        return FALSE;

    if((i_this->mTypeBits & 1) == 1){
        cBgD_t* bgwData = static_cast<cBgD_t*>(dComIfG_getObjectRes("Bridge", BRIDGE_DZB_MBRDG2));
        if(i_this->mpBgW->Set(bgwData, 0) != FALSE)
            return FALSE;
    }
    else {
        cBgD_t* bgwData = static_cast<cBgD_t*>(dComIfG_getObjectRes("Bridge", BRIDGE_DZB_MBRDG));
        if(i_this->mpBgW->Set(bgwData, 0) != FALSE)
            return FALSE;
    }
    i_this->mpBgW->SetRideCallback(ride_call_back);
    i_this->mpBgW->CopyBackVtx();
    
    cBgD_Vtx_t* pVtxTbl = i_this->mpBgW->GetVtxTbl();
    for(int i = 0; i < i_this->mpBgW->GetVtxNum(); i++){
        pVtxTbl[i].x = a_this->current.pos.x;
        pVtxTbl[i].y = a_this->current.pos.y;
        pVtxTbl[i].z = a_this->current.pos.z;
    }
    i_this->mpBgW->Move();
    return TRUE;
}

/* 00004310-00004770       .text daBridge_Create__FP10fopAc_ac_c */
static cPhs_State daBridge_Create(fopAc_ac_c* a_this) {
    bridge_class* i_this = static_cast<bridge_class*>(a_this);
    fopAcM_SetupActor(i_this, bridge_class);

    cPhs_State ret = dComIfG_resLoad(&i_this->mPhsBridge, "Bridge");
    if(ret == cPhs_COMPLEATE_e){
    
        i_this->mTypeBits = fopAcM_GetParam(a_this);
        if(i_this->mTypeBits == 0xff)
            i_this->mTypeBits = 0;
        i_this->mUnk_2 = fopAcM_GetParam(a_this) >> 8;
        i_this->mPathId = fopAcM_GetParam(a_this) >> 16;
        if(i_this->mPathId == 0xff)
            return cPhs_ERROR_e;

        dPath* path = dPath_GetRoomPath(i_this->mPathId, fopAcM_GetRoomNo(a_this));
        if(path != NULL){
            dPnt* pnt = path->m_points;
            a_this->home.pos = pnt[0].m_position;
            i_this->mEndPos = pnt[1].m_position;
            cXyz delta = i_this->mEndPos - a_this->home.pos;

            a_this->home.angle.y = cM_atan2s(delta.x, delta.z);
            a_this->home.angle.x = -cM_atan2s(delta.y, std::sqrtf(delta.x * delta.x + delta.z * delta.z));
            
            float fVar1 = 0.0f;
            if(delta.abs() > 1300.0f) fVar1 = 3.0f;
            i_this->mBrCount = delta.abs() / ((fVar1 + 47.0f) * 1.5f);
            i_this->mPathIdP = i_this->mPathId + 1;
        }
        else {
            return cPhs_ERROR_e;
        }
        if(i_this->mBrCount >= 50)
            return cPhs_ERROR_e;

        if(fopAcM_entrySolidHeap(a_this, CallbackCreateHeap, 0x2fb60) == false)
            return cPhs_ERROR_e;

        CreateInit(a_this);
        if(i_this->mpBgW != NULL && dComIfG_Bgsp()->Regist(i_this->mpBgW, i_this) != 0)
            return cPhs_ERROR_e;

        a_this->cullMtx = i_this->mBr[0].mpModel->getBaseTRMtx();
        fopAcM_setCullSizeBox(a_this, -120.0f, -30.0f, -60.0f, 120.0f, 30.0f, 60.0f);
        fopAcM_setCullSizeFar(a_this, 10.0f);
        if((i_this->mTypeBits & 0b10) != 0){
            // if(i_this->mBrCount < 16){
            //     if(i_this->mBrCount < 12){
            //         i_this->m02DD = 7;
            //     }
            //     else {
            //         i_this->m02DD = 11;
            //     }
            // }
            // else {
            //     i_this->m02DD = 15;
            // }
            if(i_this->mBrCount >= 16)
                i_this->m02DD = 15;
            else if(i_this->mBrCount >= 12)
                i_this->m02DD = 11;
            else
                i_this->m02DD = 7;
        }
        else{
            i_this->m02DD = i_this->mBrCount;
        }
        
    }

    return ret;
}

static actor_method_class l_daBridge_Method = {
    (process_method_func)daBridge_Create,
    (process_method_func)daBridge_Delete,
    (process_method_func)daBridge_Execute,
    (process_method_func)daBridge_IsDelete,
    (process_method_func)daBridge_Draw,
};

actor_process_profile_definition g_profile_BRIDGE = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0003,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_BRIDGE,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(bridge_class),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x0089,
    /* Actor SubMtd */ &l_daBridge_Method,
    /* Status       */ fopAcStts_CULL_e | fopAcStts_UNK4000_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
